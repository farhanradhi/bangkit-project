Index: app/src/main/java/com/capstone/sampahin/ui/chat/ChatFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.capstone.sampahin.ui.chat\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.DividerItemDecoration\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.capstone.sampahin.R\r\nimport com.capstone.sampahin.data.Message\r\nimport com.capstone.sampahin.data.chat.ChatRequest\r\nimport com.capstone.sampahin.databinding.FragmentChatBinding\r\nimport com.capstone.sampahin.ui.chat.adapter.ChatHistoryAdapter\r\nimport com.capstone.sampahin.ui.chat.adapter.QuestionSuggestionsAdapter\r\n\r\nclass ChatFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentChatBinding\r\n\r\n    private lateinit var chatAdapter: ChatHistoryAdapter\r\n\r\n    private val viewModel: ChatViewModel by viewModels()\r\n\r\n    private val args: ChatFragmentArgs by navArgs()\r\n    private var topicContent: String = \"\"\r\n    private var topicSuggestedQuestions: List<ChatRequest> = emptyList()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentChatBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        (requireActivity() as AppCompatActivity).supportActionBar?.title =\r\n            String.format(getString(R.string.fragment_qa_title), args.topicTitle)\r\n\r\n\r\n//        val client = DatasetClient(requireActivity())\r\n//        client.loadJsonData()?.let {\r\n//            topicContent = it.getContents()[args.topicID]\r\n//            topicSuggestedQuestions = it.questions[args.topicID]\r\n//        }\r\n\r\n        setButtonSuggestion()\r\n        initChatHistoryRecyclerView()\r\n        initQuestionSuggestionsRecyclerView()\r\n        initBertQAModel()\r\n\r\n        viewModel.fetchQuestions()\r\n        viewModel.questions.observe(viewLifecycleOwner) { questions ->\r\n            topicSuggestedQuestions = questions\r\n            initQuestionSuggestionsRecyclerView()\r\n        }\r\n\r\n        binding.tietQuestion.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n\r\n            // Only allow clicking send button if there is a question.\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                val shouldSendButtonActive: Boolean = s.isNullOrEmpty()\r\n                binding.ibSend.isClickable = !shouldSendButtonActive\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // no op\r\n            }\r\n\r\n        })\r\n\r\n        binding.ibSend.setOnClickListener {\r\n            if (it.isClickable && (binding.tietQuestion.text?.isNotEmpty() == true)) {\r\n                with(binding.tietQuestion) {\r\n\r\n                    binding.progressBar.visibility = View.VISIBLE\r\n\r\n                    val question = this.text.toString()\r\n                    this.text?.clear()\r\n\r\n                    chatAdapter.addMessage(Message(question, true))\r\n\r\n\r\n\r\n                    Handler(Looper.getMainLooper()).post {\r\n//                        bertHelper.getQuestionAnswer(topicContent, question)\r\n                        viewModel.fetchAnswers(ChatRequest(question))\r\n                        binding.progressBar.visibility = View.GONE\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Please enter the question first.\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n\r\n            val imm = requireContext().getSystemService(\r\n                Context.INPUT_METHOD_SERVICE\r\n            ) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(it.windowToken, 0)\r\n\r\n        }\r\n\r\n        binding.buttonBack.setOnClickListener{\r\n            requireActivity().onBackPressedDispatcher.onBackPressed()\r\n        }\r\n\r\n    }\r\n\r\n    private fun setButtonSuggestion() {\r\n        val buttonSuggestion = binding.buttonSuggestion\r\n        val rvQuestionSuggestions = binding.rvQuestionSuggestions\r\n        val progressBar = binding.progressBar\r\n\r\n        buttonSuggestion.isEnabled = progressBar.visibility == View.GONE\r\n\r\n        buttonSuggestion.setOnClickListener {\r\n            if (progressBar.visibility == View.GONE) {\r\n                val isVisible = rvQuestionSuggestions.visibility == View.VISIBLE\r\n                rvQuestionSuggestions.visibility = if (isVisible) View.GONE else View.VISIBLE\r\n                buttonSuggestion.setImageResource(\r\n                    if (isVisible) R.drawable.baseline_keyboard_arrow_down_24\r\n                    else R.drawable.baseline_keyboard_arrow_up_24\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initChatHistoryRecyclerView() {\r\n        val historyLayoutManager = LinearLayoutManager(context)\r\n        binding.rvChatHistory.layoutManager = historyLayoutManager\r\n\r\n        chatAdapter = ChatHistoryAdapter()\r\n        binding.rvChatHistory.adapter = chatAdapter\r\n\r\n        chatAdapter.addMessage(Message(topicContent, false))\r\n    }\r\n\r\n    private fun initQuestionSuggestionsRecyclerView() {\r\n\r\n        if (topicSuggestedQuestions.isNotEmpty()) {\r\n            val decoration = DividerItemDecoration(requireContext(), DividerItemDecoration.VERTICAL)\r\n            with(binding.rvQuestionSuggestions) {\r\n                adapter = QuestionSuggestionsAdapter(\r\n                    topicSuggestedQuestions,\r\n                    object : QuestionSuggestionsAdapter.OnOptionClicked {\r\n                        override fun onOptionClicked(optionID: Int) {\r\n                            setQuestion(optionID)\r\n                        }\r\n\r\n                    })\r\n                layoutManager =\r\n                    LinearLayoutManager(requireContext(), LinearLayoutManager.VERTICAL, false)\r\n                addItemDecoration(decoration)\r\n            }\r\n        } else {\r\n            binding.tvSuggestion.visibility = View.GONE\r\n            binding.rvQuestionSuggestions.visibility = View.GONE\r\n        }\r\n\r\n    }\r\n\r\n    private fun initBertQAModel() {\r\n\r\n        viewModel.answers.observe(viewLifecycleOwner) { answer ->\r\n            answer?.let {\r\n                chatAdapter.addMessage(Message(it.answer.toString(), false))\r\n                binding.rvChatHistory.scrollToPosition(chatAdapter.itemCount - 1)\r\n            }\r\n            Toast.makeText(requireContext(), \"Failed to fetch answer\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n//        bertHelper = BertHelper(requireContext(), object : BertHelper.ResultAnswerListener {\r\n//\r\n//            override fun onError(error: String) {\r\n//                Toast.makeText(requireContext(), error, Toast.LENGTH_SHORT).show()\r\n//            }\r\n//\r\n//            override fun onResults(results: List<QaAnswer>?, inferenceTime: Long) {\r\n//                results?.first()?.let {\r\n//                    chatAdapter.addMessage(Message(it.text, false))\r\n//                    binding.rvChatHistory.scrollToPosition(chatAdapter.itemCount - 1)\r\n//                }\r\n//            }\r\n//\r\n//        })\r\n\r\n    }\r\n\r\n    private fun setQuestion(position: Int) {\r\n        binding.tietQuestion.setText(\r\n            topicSuggestedQuestions[position].question\r\n        )\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        binding.tietQuestion.addTextChangedListener(null)\r\n        super.onDestroyView()\r\n    }\r\n\r\n//    override fun onDestroy() {\r\n//        bertHelper.clearBertQuestionAnswerer()\r\n//        super.onDestroy()\r\n//    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/capstone/sampahin/ui/chat/ChatFragment.kt b/app/src/main/java/com/capstone/sampahin/ui/chat/ChatFragment.kt
--- a/app/src/main/java/com/capstone/sampahin/ui/chat/ChatFragment.kt	(revision b4960080242fdbb3f24aac999735448a28bc0f7f)
+++ b/app/src/main/java/com/capstone/sampahin/ui/chat/ChatFragment.kt	(date 1733844671569)
@@ -99,7 +99,7 @@
 
                     Handler(Looper.getMainLooper()).post {
 //                        bertHelper.getQuestionAnswer(topicContent, question)
-                        viewModel.fetchAnswers(ChatRequest(question))
+                        viewModel.fetchAnswers(ChatRequest(listOf(args.topicTitle), question))
                         binding.progressBar.visibility = View.GONE
                     }
 
Index: app/src/main/java/com/capstone/sampahin/data/chat/ChatRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.capstone.sampahin.data.chat\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class ChatRequest(\r\n    @field: SerializedName(\"topic\")\r\n    val topic: String,\r\n\r\n    @field: SerializedName(\"question\")\r\n    val question: String? = null\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/capstone/sampahin/data/chat/ChatRequest.kt b/app/src/main/java/com/capstone/sampahin/data/chat/ChatRequest.kt
--- a/app/src/main/java/com/capstone/sampahin/data/chat/ChatRequest.kt	(revision b4960080242fdbb3f24aac999735448a28bc0f7f)
+++ b/app/src/main/java/com/capstone/sampahin/data/chat/ChatRequest.kt	(date 1733844563574)
@@ -3,8 +3,8 @@
 import com.google.gson.annotations.SerializedName
 
 data class ChatRequest(
-    @field: SerializedName("topic")
-    val topic: String,
+    @field: SerializedName("topics")
+    val topics: List<String> = emptyList(),
 
     @field: SerializedName("question")
     val question: String? = null
Index: app/src/main/java/com/capstone/sampahin/ui/chat/Topics.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.capstone.sampahin.ui.chat\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n/**\r\n *  Topics data class not used anymore in this project cause the data has been moved to the server\r\n *  Keep this data class for reference local JSON parsing\r\n */\r\n\r\ndata class Topics (\r\n    @SerializedName(\"titles\")\r\n    private val titles: List<List<String>>,\r\n    @SerializedName(\"contents\")\r\n    private val contents: List<List<String>>,\r\n    @SerializedName(\"questions\")\r\n    val questions: List<List<String>>\r\n) {\r\n    fun getTitles(): List<String> {\r\n        return titles.map { it[0] }\r\n    }\r\n\r\n    fun getContents(): List<String> {\r\n        return contents.map { it[0] }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/capstone/sampahin/ui/chat/Topics.kt b/app/src/main/java/com/capstone/sampahin/ui/chat/Topics.kt
--- a/app/src/main/java/com/capstone/sampahin/ui/chat/Topics.kt	(revision b4960080242fdbb3f24aac999735448a28bc0f7f)
+++ b/app/src/main/java/com/capstone/sampahin/ui/chat/Topics.kt	(date 1733840971672)
@@ -3,7 +3,7 @@
 import com.google.gson.annotations.SerializedName
 
 /**
- *  Topics data class not used anymore in this project cause the data has been moved to the server
+ *  Topics data class is not used anymore in this project cause the data has been moved to the server
  *  Keep this data class for reference local JSON parsing
  */
 
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    id(\"com.google.devtools.ksp\")\r\n    id(\"androidx.navigation.safeargs\")\r\n    id(\"kotlin-parcelize\")\r\n    alias(libs.plugins.google.android.libraries.mapsplatform.secrets.gradle.plugin)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.capstone.sampahin\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.capstone.sampahin\"\r\n        minSdk = 21\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        buildConfigField (\"String\", \"BASE_URL\", \"\\\"https://firebase-851479113294.asia-southeast2.run.app/\\\"\")\r\n        buildConfigField (\"String\", \"ML_BASE_URL\", \"\\\"https://backend-ml-dot-sampahin.et.r.appspot.com/\\\"\")\r\n        buildConfigField (\"String\", \"MAP_BASE_URL\", \"\\\"https://places-nearby-851479113294.asia-southeast2.run.app/\\\"\")\r\n        buildConfigField (\"String\", \"CHAT_BASE_URL\", \"\\\"https://chatbot-be-dot-sampahin.et.r.appspot.com/\\\"\")\r\n        externalNativeBuild {\r\n            cmake {\r\n                cppFlags += \"\"\r\n            }\r\n        }\r\n        manifestPlaceholders.putAll(\r\n            mapOf(\"MAPS_API_KEY\" to (project.findProperty(\"MAPS_API_KEY\") ?: \"\"))\r\n        )\r\n\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_17\r\n        targetCompatibility = JavaVersion.VERSION_17\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"17\"\r\n    }\r\n    buildFeatures {\r\n        viewBinding = true\r\n        mlModelBinding = true\r\n        buildConfig = true\r\n    }\r\n    externalNativeBuild {\r\n        cmake {\r\n            path = file(\"src/main/cpp/CMakeLists.txt\")\r\n            version = \"3.22.1\"\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.androidx.constraintlayout)\r\n    implementation(libs.androidx.lifecycle.livedata.ktx)\r\n    implementation(libs.androidx.lifecycle.viewmodel.ktx)\r\n    implementation(libs.androidx.navigation.fragment.ktx)\r\n    implementation(libs.androidx.navigation.ui.ktx)\r\n    implementation(libs.androidx.activity)\r\n    implementation(libs.play.services.maps)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n\r\n    implementation(libs.androidx.camera.camera2)\r\n    implementation(libs.androidx.camera.lifecycle)\r\n    implementation(libs.androidx.camera.view)\r\n\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.logging.interceptor)\r\n    implementation(libs.retrofit)\r\n    implementation(libs.converter.gson)\r\n    implementation (libs.github.glide)\r\n\r\n    implementation(libs.tensorflow.lite.support)\r\n    implementation(libs.tensorflow.lite.metadata)\r\n    implementation(libs.tensorflow.lite.task.vision)\r\n\r\n    implementation(libs.androidx.datastore.preferences)\r\n    implementation(libs.kotlinx.coroutines.core)\r\n    implementation(libs.kotlinx.coroutines.android)\r\n\r\n    ksp(libs.androidx.room.compiler)\r\n    implementation(libs.androidx.room.ktx)\r\n    implementation(libs.gson)\r\n    implementation(libs.tensorflow.lite.task.text)\r\n    implementation(libs.tensorflow.lite.gpu)\r\n    implementation(libs.tensorflow.lite.gpu.delegate.plugin)\r\n\r\n    implementation (libs.ucrop)\r\n    implementation(libs.play.services.location)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision b4960080242fdbb3f24aac999735448a28bc0f7f)
+++ b/app/build.gradle.kts	(date 1733840435118)
@@ -55,12 +55,6 @@
         mlModelBinding = true
         buildConfig = true
     }
-    externalNativeBuild {
-        cmake {
-            path = file("src/main/cpp/CMakeLists.txt")
-            version = "3.22.1"
-        }
-    }
 }
 
 dependencies {
